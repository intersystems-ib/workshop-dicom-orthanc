<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for UNIX (Ubuntu Server LTS for x86-64 Containers) 2023.1 (Build 207U)" ts="2023-04-03 06:19:24">
<Class name="DICOMPKG.FoundationProduction">
<ProcedureBlock>0</ProcedureBlock>
<Super>Ens.Production</Super>
<TimeChanged>66543,27667.8921821</TimeChanged>
<TimeCreated>66541,57923.9542656</TimeCreated>

<Parameter name="SETTINGS">
<Default>ShutdownTimeout,UpdateTimeout,StorageLocation</Default>
</Parameter>

<Property name="StorageLocation">
<Type>%String</Type>
</Property>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="DICOMPKG.FoundationProduction" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>1</ActorPoolSize>
  <Setting Target="Adapter" Name="StorageLocation">/shared/durable/out</Setting>
  <Item Name="EnsLib.DICOM.Service.File" Category="" ClassName="EnsLib.DICOM.Service.File" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="FilePath">/shared/durable/in/</Setting>
    <Setting Target="Host" Name="TargetConfigName">Workshop.DICOM.Production.StorageFile</Setting>
  </Item>
  <Item Name="Workshop.DICOM.Production.StorageFile" Category="" ClassName="Workshop.DICOM.Production.StorageFile" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="OperationDuplexName">EnsLib.DICOM.Operation.TCP</Setting>
    <Setting Target="Host" Name="StorageLocation">/shared/durable/out</Setting>
  </Item>
  <Item Name="EnsLib.DICOM.Operation.TCP" Category="" ClassName="EnsLib.DICOM.Operation.TCP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="IPAddress">orthanc</Setting>
    <Setting Target="Adapter" Name="IPPort">4242</Setting>
    <Setting Target="Adapter" Name="LocalAET">IRIS</Setting>
    <Setting Target="Adapter" Name="RemoteAET">ORTHANC</Setting>
    <Setting Target="Host" Name="DuplexTargetConfigName">Workshop.DICOM.Production.StorageFile</Setting>
    <Setting Target="Adapter" Name="TraceVerbosity">2</Setting>
    <Setting Target="Host" Name="ArchiveIO">0</Setting>
  </Item>
  <Item Name="EnsLib.DICOM.Service.TCP" Category="" ClassName="EnsLib.DICOM.Service.TCP" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="IPPort">2010</Setting>
    <Setting Target="Adapter" Name="LocalAET">IRIS</Setting>
    <Setting Target="Adapter" Name="RemoteAET">ORTHANC</Setting>
    <Setting Target="Host" Name="DuplexTargetConfigName">Demo.DICOM.Process.StorageLocal</Setting>
    <Setting Target="Adapter" Name="TraceVerbosity">2</Setting>
  </Item>
  <Item Name="Demo.DICOM.Operation.File" Category="" ClassName="Demo.DICOM.Operation.File" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="FileStorageDirectory">/shared/durable/repository</Setting>
  </Item>
  <Item Name="Demo.DICOM.Process.StorageLocal" Category="" ClassName="Demo.DICOM.Process.StorageLocal" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="Demo.DICOM.Operation.File">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66543,27350.2505861</TimeChanged>
<TimeCreated>66431,85845.2356029</TimeCreated>

<Parameter name="SETTINGS">
<Description>
This is the directory where the local files will be stored</Description>
<Default>FileStorageDirectory</Default>
</Parameter>

<Property name="FileStorageDirectory">
<Description>
This is the directory where the incoming DICOM files will be stored</Description>
<Type>%String</Type>
<InitialExpression>"/"</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Method name="OnMessage">
<Description>
This is the default message handler.  All request types not declared in the message map are delivered here</Description>
<FormalSpec>pRequest:%Library.Persistent,*pResponse:%Library.Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	#dim tFile As EnsLib.DICOM.File
	#dim tFileName As %String
	try {
		
		#; We should only ever see DICOM Documents here
		$$$ASSERT(pRequest.%Extends("EnsLib.DICOM.Document"))
		
		#; Create a DICOM File from the DICOM document
		Set tSC=##class(EnsLib.DICOM.File).CreateFromDocument(pRequest,.tFile)
		If $$$ISERR(tSC) Quit
		
		#; Create a unique filename
		Set tFileName=..NewFilename(..FileStorageDirectory)
		
		#; Create a new file with a unique name and the dcm extension in the target directory
		Set tSC=tFile.Save(tFileName)
		
	} catch(e) {
		Set tSC=e.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="NewFilename">
<Description>
Create a new file name within the specified directory</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>dir</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[##class(%File).NormalizeDirectory(dir)_(##class(%FileBinaryStream).NewFileName("dcm"))
]]></Implementation>
</Method>
</Class>


<Class name="Demo.DICOM.Process.StorageLocal">
<Super>EnsLib.DICOM.Process</Super>
<TimeChanged>66431,85845.3532383</TimeChanged>
<TimeCreated>66431,85845.3532383</TimeCreated>

<Method name="OnMessage">
<Description>
Messages received here are instances of EnsLib.DICOM.Document sent to this
process by the service. The received DICOM file will be sent to the operation for persisting
in the file system. If all is well a C-STORE-RSP is sent to the service to indicate to the DICOM
peer that the storage was successful. If an error occurs the Association with the DICOM peer will
be aborted, indicating that the storage was not successful.</Description>
<FormalSpec>pSourceConfigName:%String,pInput:%Library.Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	#dim tMsgType,tMsgId As %String
	#dim tOutput As EnsLib.DICOM.Document
	
	Try {
		
		#; We should only ever see DICOM Documents here
		$$$ASSERT(pInput.%Extends("EnsLib.DICOM.Document"))
		
		#; We only ever get DICOM Documents from the Service
		$$$ASSERT(pSourceConfigName=..ServiceDuplexName)
		 	
 		#; Get the CommandField, it contains the type of request, it should ALWAYS be present
		Set tMsgType=$$$MsgTyp2Str(pInput.GetValueAt("CommandSet.CommandField",,.tSC))
		If $$$ISERR(tSC) Quit

		#; We are only handling Storage Requests
		$$$ASSERT(tMsgType="C-STORE-RQ")

		#; Record the originating message id
		Set tMsgId=pInput.GetValueAt("CommandSet.MessageID",,.tSC)
		If $$$ISERR(tSC) $$$LOGSTATUS(tSC) Quit
		
		#; We can forward the document to the operation
		Set tSC=..SendRequestSync("Demo.DICOM.Operation.File",pInput)
		If $$$ISERR(tSC) Quit
			
		#; We need to send a reply to the service in all cases, so create an appropriate response
		Set tSC=..CreateStorageResponse(pInput,.tOutput)
		If $$$ISERR(tSC) Quit
		
		#; Send the reply back to the service ( don't want a response )
		Set tSC=..SendRequestAsync(..ServiceDuplexName,tOutput,0)
		If $$$ISERR(tSC) Quit
		
		#; Stop the private session to ensure each message gets its own session				
		Set tSC=..StopPrivateSession(..ServiceDuplexName)
		If $$$ISERR(tSC) Quit
		
	} catch (e) {
		Set tSC=e.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="CreateStorageResponse">
<Description>
Create a storage response DICOM message</Description>
<FormalSpec>pDocIn:EnsLib.DICOM.Document,*pDocOut:EnsLib.DICOM.Document</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim tTemp As %String
	try {
		
		#; Get the current storage location
		Set tStorageLocation=..GetProductionSettingValue("StorageLocation",.tSC)
		If $$$ISERR(tSC) Quit
		
		#; Create an instance of a DICOM Document to form the response
		Kill %objlasterror Set pDocOut=##class(EnsLib.DICOM.Document).%New(tStorageLocation)
		If '$IsObject(pDocOut) Set tSC=$Get(%objlasterror,$$$ERROR($$$FailedToNewClass,"EnsLib.DICOM.Document")) Quit
		
		#; Need to copy over the AffectedSOPClassUID (mandatory field)
		Set tTemp=pDocIn.GetValueAt("CommandSet.AffectedSOPClassUID",,.tSC)
		$$$ASSERT('$$$ISERR(tSC))
		
		Set tSC=pDocOut.SetValueAt(tTemp,"CommandSet.AffectedSOPClassUID") If $$$ISERR(tSC) Quit
		If $$$ISERR(tSC) Quit
		
		#; Set the CommandField, this is a Storage Response
		Set tSC=pDocOut.SetValueAt($$$Str2MsgTyp("C-STORE-RSP"),"CommandSet.CommandField")
		If $$$ISERR(tSC) Quit
		
		#; And indicate the message id being responded to by copying over the originating message id
		Set tTemp=pDocIn.GetValueAt("CommandSet.MessageID",,.tSC)
		$$$ASSERT('$$$ISERR(tSC))
		
		Set tSC=pDocOut.SetValueAt(tTemp,"CommandSet.MessageIDBeingRespondedTo") If $$$ISERR(tSC) Quit
		If $$$ISERR(tSC) Quit
		 
		#; Need to copy over the affected SOP instance id
		Set tTemp=pDocIn.GetValueAt("CommandSet.AffectedSOPInstanceUID",,.tSC)
		$$$ASSERT('$$$ISERR(tSC))
		
		Set tSC=pDocOut.SetValueAt(tTemp,"CommandSet.AffectedSOPInstanceUID") If $$$ISERR(tSC) Quit
		If $$$ISERR(tSC) Quit
		
		#; Need to copy over the transfer syntax
		Set pDocOut.DataSet.TransferSyntax=pDocIn.DataSet.TransferSyntax
		
		#; Finally set a success status
		Set tSC=pDocOut.SetValueAt(0,"CommandSet.Status") If $$$ISERR(tSC) Quit
		If $$$ISERR(tSC) Quit
		
	} catch {
		Set tSC=$$$EnsSystemError
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnError">
<Description>
This method is called when an error response is received
Returning the same error will cause the BusinessProcess to set its status to error and close down
Returning $$$OK from this method causes the BusinessProcess to recover from this error</Description>
<FormalSpec><![CDATA[request:%Library.Persistent,&response:%Library.Persistent,callrequest:%Library.Persistent,pErrorStatus:%Status,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Form an abort command
	Set tCommandAbort=##class(EnsLib.DICOM.Command.Abort).%New($$$ABORTSOURCESERVICEPROVIDER,$$$ABORTREASONNOTSPECIFIED)
		
	#; Send it to the service, this tells the peer that the storage was not successful
	Do ..AbortAssociation(..ServiceDuplexName,tCommandAbort)
	
	#; Want to continue offering the service, even if this instance failed
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Project name="EnsExportProduction_2023-04-03 06-11-55_490+0" LastModified="2023-04-03 06:19:24.9609636">
  <ProjectDescription>Studio Project generated from Production 'DICOMPKG.FoundationProduction' at 2023-04-03 06:11:55.490 UTC</ProjectDescription>
  <Items>
    <ProjectItem name="DICOMPKG.FoundationProduction" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.DICOM.Operation.File" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.DICOM.Process.StorageLocal" type="CLS"></ProjectItem>
    <ProjectItem name="Workshop.DICOM.Production.StorageFile" type="CLS"></ProjectItem>
    <ProjectItem name="EnsExportNotes.EnsExportProduction_2023-04-03 06-11-55_490+0.PTD" type="PTD"></ProjectItem>
  </Items>
</Project>


<Class name="Workshop.DICOM.Production.StorageFile">
<Super>EnsLib.DICOM.Process</Super>
<TimeChanged>66543,41229.9660081</TimeChanged>
<TimeCreated>66541,30534.6929811</TimeCreated>

<Parameter name="SETTINGS">
<Description>
This parameter names the operation used to provide storage</Description>
<Default>OperationDuplexName,StorageLocation</Default>
</Parameter>

<Property name="OriginatingMessageID">
<Description>
This keeps track of the OriginatingMessageID</Description>
<Type>%Integer</Type>
</Property>

<Property name="DocumentFromService">
<Description>
This is the incoming document from the business Sservice</Description>
<Type>EnsLib.DICOM.Document</Type>
</Property>

<Property name="CurrentState">
<Description>
This keeps track of the current state of the process</Description>
<Type>%String</Type>
<InitialExpression>"OperationNotConnected"</InitialExpression>
</Property>

<Property name="OperationDuplexName">
<Description>
This is the name of the operation providing storage</Description>
</Property>

<Property name="StorageLocation">
<Description>
This is the storage location for the DICOM streams to be stored</Description>
<Type>%String</Type>
</Property>

<Property name="RetryCount">
<Description>
This is defines the number of times a storage operation should be retried</Description>
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Method name="OnMessage">
<Description>
Messages received here are instances of EnsLib.DICOM.Document sent to this
process by the service or operation config items. In this demo, the process is ever
in one of two states, the Operation is connected or not.</Description>
<FormalSpec>pSourceConfigName:%String,pInput:%Library.Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim tMsgType As %String
    do {
        
        If pInput.%Extends("Ens.AlarmResponse") {
            
            #; We are retrying, simulate 1st call
            
            #; Make sure we have a document
            Set pInput=..DocumentFromService
            
            $$$ASSERT(..CurrentState="OperationNotConnected")
        }
            
        #; If its a document sent from the service
        If pSourceConfigName'=..OperationDuplexName {
            
            #; If the operation has not been connected yet
            If ..CurrentState="OperationNotConnected" {
                
                #; We need to establish a connection to the operation,
                #; Keep hold of the incoming document
                Set ..DocumentFromService=pInput
                
                #; We will be called back at OnAssociationEstablished()
                Set tSC=..EstablishAssociation(..OperationDuplexName)
                
            } elseif ..CurrentState="OperationConnected" {
                
                #; The Operation is connected
                
                #; Get the CommandField, it contains the type of request, it should ALWAYS be present
                Set tMsgType=$$$MsgTyp2Str(pInput.GetValueAt("CommandSet.CommandField",,.tSC))
                If $$$ISERR(tSC) Quit
        
                #; We are only handling storage requests at present
                $$$ASSERT(tMsgType="C-STORE-RQ")
        		
        		// set patientId = pInput.GetValueAt("DataSet.PatientID",,.tSC)
        		// Set ^PatientImageReceived(patientId) = pInput.GetValueAt("DataSet.PatientName",,.tSC)
                #; We can forward the document to the operation
                Set tSC=..SendRequestAsync(..OperationDuplexName,pInput,0)
            }
            
        } elseif pSourceConfigName=..OperationDuplexName {
            
            #; We have received a document from the operation
            Set tMsgType=$$$MsgTyp2Str(pInput.GetValueAt("CommandSet.CommandField",,.tSC))
            If $$$ISERR(tSC) Quit
            
            #; Should only EVER get a C-STORE-RSP
            $$$ASSERT(tMsgType="C-STORE-RSP")

            #; Now close the Association with the operation, we will be called back at
            #; OnAssociationReleased()
            Set tSC=..ReleaseAssociation(..OperationDuplexName)
            
            #; Finished with this document
            Set ..DocumentFromService="",..OriginatingMessageID=""
        }
    } while (0)
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="OnAssociationEstablished">
<Description>
This method is called by the framework on successful establishment of an association</Description>
<FormalSpec>pSourceConfigName:%String,pInput:EnsLib.DICOM.Notify.Established</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    
    If pSourceConfigName=..OperationDuplexName {
        
        #; The association with the operation has been completed, operation is now connected
        Set ..CurrentState="OperationConnected"
    
        #; Call the OnMessage() with he saved document ( if we have it )
        if ($IsObject(..DocumentFromService)) {
            Set tSC=..OnMessage(..ServiceDuplexName,..DocumentFromService)
        }   
    }
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="OnAssociationReleased">
<FormalSpec>pSourceConfigName:%String,pInput:EnsLib.DICOM.Notify.Released</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    
    $$$ASSERT(pSourceConfigName=..OperationDuplexName)
        
    #; The association between this process and the operation has been released, so we are now
    #; not connected to the operation
    Set ..CurrentState="OperationNotConnected"
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="OnError">
<Description>
This method is called when any error occurs. Returning the same error will cause the BusinessProcess to set its
status to error and close down</Description>
<FormalSpec><![CDATA[request:%Library.Persistent,&response:%Library.Persistent,callrequest:%Library.Persistent,pErrorStatus:%Status,pCompletionKey:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #; If we are in conversation with the operation, we neet to tell the operation to ABORT its association
    If ..CurrentState="OperationConnected" {
        
        #; Form an abort message
        Set tCommandAbort=##class(EnsLib.DICOM.Command.Abort).%New($$$ABORTSOURCESERVICEUSER,$$$ABORTREASONNOTSPECIFIED)
        
        #; Send it to the operation
        Do ..AbortAssociation(..OperationDuplexName,tCommandAbort)
    }
    Quit pErrorStatus
]]></Implementation>
</Method>

<Method name="OnAssociationErrored">
<Description>
This callback is called by the framework when an assocation encounters an error</Description>
<FormalSpec>pSourceConfigName:%String,pInput:EnsLib.DICOM.Notify.Errored</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    
    #; Demonstrate Retry Logic, we will trigger a wakeup call and check for that in OnMessage()
    Set ..RetryCount=..RetryCount-1
    
    If ..RetryCount'=0 {
        Set tSC=..ScheduleWakeupCall(2)
    } else {
        #; Failed after all retries
        Set tSC=pInput.Status
    }
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="OnAssociationAborted">
<Description>
This callback is called by the framework when an association is aborted</Description>
<FormalSpec>pSourceConfigName:%String,pInput:EnsLib.DICOM.Notify.Aborted</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..CurrentState="OperationNotConnected"
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAssociationRejected">
<Description>
This callback is called by the framework when an Association is rejected</Description>
<FormalSpec>pSourceConfigName:%String,pInput:EnsLib.DICOM.Notify.Rejected</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..CurrentState="OperationNotConnected"
    Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>StorageFileDefaultData</DefaultData>
<Data name="StorageFileDefaultData">
<Subscript>"StorageFile"</Subscript>
<Value name="1">
<Value>OriginatingMessageID</Value>
</Value>
<Value name="2">
<Value>DocumentFromService</Value>
</Value>
<Value name="3">
<Value>CurrentState</Value>
</Value>
<Value name="4">
<Value>OperationDuplexName</Value>
</Value>
<Value name="5">
<Value>RetryCount</Value>
</Value>
<Value name="6">
<Value>StorageLocation</Value>
</Value>
</Data>
</Storage>
</Class>


<Document name="EnsExportNotes.EnsExportProduction_2023-04-03 06-11-55_490+0.PTD"><ProjectTextDocument name="EnsExportNotes.EnsExportProduction_2023-04-03 06-11-55_490+0" description="Export Notes for export EnsExportProduction_2023-04-03 06-11-55_490+0">
<![CDATA[<Deployment>
<Creation>
<Machine>IRIS</Machine>
<Instance>IRIS</Instance>
<Namespace>DICOM</Namespace>
<SourceProduction>DICOMPKG.FoundationProduction</SourceProduction>
<Username>_SYSTEM</Username>
<UTC>2023-04-03 06:19:24.939</UTC>
</Creation>
<Notes>
</Notes>
<Contents>
<ExportProject>EnsExportProduction_2023-04-03 06-11-55_490+0</ExportProject>
<Item num="1">DICOMPKG.FoundationProduction.CLS</Item>
<Item num="2">Demo.DICOM.Operation.File.CLS</Item>
<Item num="3">Demo.DICOM.Process.StorageLocal.CLS</Item>
<Item num="4">Workshop.DICOM.Production.StorageFile.CLS</Item>
</Contents>
<ProductionClassInExport>DICOMPKG.FoundationProduction</ProductionClassInExport>
</Deployment>

]]></ProjectTextDocument>
</Document></Export>
